// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should flatten a complex object 1`] = `
Object {
  "baz.0.0": 1,
  "baz.0.1": 2,
  "baz.1.0": 3,
  "baz.1.1": 4,
  "baz.2.0.test.0": 4,
  "baz.2.0.test.1": 5,
  "baz.2.0.test.2.5": 6,
  "foo": "bar",
  "instances.0.name": "dog",
  "instances.1.name": "cat",
}
`;

exports[`should handle additional params 1`] = `
"Test: myVal
Test2: myVal2
Test3: bar
"
`;

exports[`should handle complex comments and multiple vars on the same line 1`] = `
"AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Setup for network resources
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '\${AWS::StackName}-uscc-vpc'
  PublicSubneta:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/20
      AvailabilityZone:
        'Fn::Sub': us-east-1a
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '\${AWS::StackName}-us-east-1-a-Public'
  PublicSubnetaAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubneta
      RouteTableId:
        Ref: PublicRouteTable
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '\${AWS::StackName}-uscc-igw'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            'Fn::Sub': '\${AWS::StackName}-public-table'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
"
`;

exports[`should handle expressions 1`] = `
"Foo: barrrrr
Baz: bazzzzz
Bar:
  dog: yay
  cat: nay
Bar2:
  dog: yay
  cat: nay
Bar3: barrrrr
dog: yay
cat: nay
asdf:
  dog: yay
  cat: nay
subTest:
  answer: not meow
"
`;

exports[`should handle mutliple stages 1`] = `
"AWSTemplateFormatVersion: '2010-09-09'
dog:
  Type: 'AWS::EC2::Instance'
  Properties:
    Size: big
    Cidr: 0.1.1.1
  Tags:
    Name: tagname
    Value: tagval
cat:
  Type: 'AWS::EC2::Instance'
  Properties:
    Size: real big
    Cidr: 0.2.2.2
  Tags:
    Name: tagname2
    Value: tagval2
Resources:
  dog:
    Type: 'AWS::EC2::Instance'
    Properties:
      Size: big
      Cidr: 0.1.1.1
    Tags:
      Name: tagname
      Value: tagval
  cat:
    Type: 'AWS::EC2::Instance'
    Properties:
      Size: real big
      Cidr: 0.2.2.2
    Tags:
      Name: tagname2
      Value: tagval2
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - dog:
            Type: 'AWS::EC2::Instance'
            Properties:
              Size: big
              Cidr: 0.1.1.1
            Tags:
              Name: tagname
              Value: tagval
        - cat:
            Type: 'AWS::EC2::Instance'
            Properties:
              Size: real big
              Cidr: 0.2.2.2
            Tags:
              Name: tagname2
              Value: tagval2
        - Endpoint:
            Ref: https
          Protocol: https
        - Foo:
            Bar: bazval
            Dog: catval
            ParamTest2: undefined
        - Foo:
            Bar: mapbaz
            Dog: mapcat
            ParamTest2: undefined
  ParamTest: undefined
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId:
        Ref: VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
Outputs:
  ELBDNSName:
    Description: ELB DNS Name
    Value:
      'Fn::GetAtt':
        - ElasticLoadBalancer
        - DNSName
"
`;

exports[`should have a cli interface that works 1`] = `
"AWSTemplateFormatVersion: '2010-09-09'
dog:
  Type: 'AWS::EC2::Instance'
  Properties:
    Size: big
    Cidr: 0.1.1.1
  Tags:
    Name: tagname
    Value: tagval
cat:
  Type: 'AWS::EC2::Instance'
  Properties:
    Size: real big
    Cidr: 0.2.2.2
  Tags:
    Name: tagname2
    Value: tagval2
Resources:
  dog:
    Type: 'AWS::EC2::Instance'
    Properties:
      Size: big
      Cidr: 0.1.1.1
    Tags:
      Name: tagname
      Value: tagval
  cat:
    Type: 'AWS::EC2::Instance'
    Properties:
      Size: real big
      Cidr: 0.2.2.2
    Tags:
      Name: tagname2
      Value: tagval2
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - dog:
            Type: 'AWS::EC2::Instance'
            Properties:
              Size: big
              Cidr: 0.1.1.1
            Tags:
              Name: tagname
              Value: tagval
        - cat:
            Type: 'AWS::EC2::Instance'
            Properties:
              Size: real big
              Cidr: 0.2.2.2
            Tags:
              Name: tagname2
              Value: tagval2
        - Endpoint:
            Ref: https
          Protocol: https
        - Foo:
            Bar: bazval
            Dog: catval
            ParamTest2: myVal2
        - Foo:
            Bar: mapbaz
            Dog: mapcat
            ParamTest2: myVal2
  ParamTest: myVal
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId:
        Ref: VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
Outputs:
  ELBDNSName:
    Description: ELB DNS Name
    Value:
      'Fn::GetAtt':
        - ElasticLoadBalancer
        - DNSName
"
`;

exports[`should update var paths 1`] = `
"
  {{instances.0.name}}:
  Type: AWS::EC2::Instance
  Properties:
    Size: {{instances.0.size}}
    Cidr: {{instances.0.cidr}}
  Tags: {{instances.0, file:subTemplates/subSubTemplates/tags.yaml}}
  Foo: {{for:instances.0.tags, file:subTemplates/subSubTemplates/tags.yaml}}
  "
`;
